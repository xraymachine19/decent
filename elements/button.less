.button-elements({
    .default(margin-bottom);
    .default(border);
    .default(border-radius);
    .default(font-size);
    .default(box-shadow);
  
    display: inline;
    .button-color(@action);
    // padding: 0 .5rem .25rem .5rem;
    // font-family: inherit;
    font-size: 115%; 
    width: 100%;
    .default(padding-left);
    .default(padding-right);
    line-height: @line-height*2;
    text-align: center;
    vertical-align: middle;
    background-image: none;
    outline: none;
    border: none;
    white-space: nowrap;
    text-decoration: none;
    touch-action: manipulation;
    cursor: pointer;
    .no-user-select;
    border: 1px solid transparent;
    .make-buttons-for(@semantic-colors);

    &.focus {
      @list: transparent 0%, transparent 0%, rgba(red(@ambient), green(@ambient), blue(@ambient), .75) 1%, transparent 82%;
      background-image: svg-gradient(to bottom, @list);
      box-shadow: 0 1px 2px rgba(red(@gray-darker), green(@gray-darker), blue(@gray-darker), .5);

    }



    @list: transparent 0%, transparent 0%, rgba(red(@ambient), green(@ambient), blue(@ambient), .5) 1%, transparent 62%;
    background-image: svg-gradient(to bottom, @list);
    background-repeat: repeat-x;

    &:active {
      @list: transparent 0%, transparent 0%, rgba(red(@ambient), green(@ambient), blue(@ambient), .25) 1%, transparent 40%;
      background-image: svg-gradient(to bottom, @list);
      box-shadow: 0 1px 1px rgba(red(@gray), green(@gray), blue(@gray), .5);
    }

    .on-tablet({
      width: auto;
    });
});
  
.make-buttons-for(@colors) {
    // make buttons for a list of color variable names
    // buttons will use variable names as class names
  
    @length: length(@colors);
  
    .make-button();
  
    .make-button(@index:1) when (@index <= @length) {
      @color-name: extract(@colors, @index);
      @color: @@color-name;
  
      &.@{color-name} { .button-color(@color);}
  
      .make-button(@index + 1);
    }
}

.button-borders(@color) {
  .set-border-color() {
    .set-lumafix(@color; @gray-darker; 40%;);
    border-color: @lumafix;
  }
  .set-border-color();
}

.button-color(@color; @contrast-standard: 9;) {
    @button-bg: @color;
    .colorize(@button-bg; @contrast-standard);
    .button-borders(@button-bg);

    & when (luma(@color) < 10%) {
      color: white;
    }

    &:focus {
      background-color: lighten(@button-bg, 16%);
    }

    &:active {
      @active-bg: darken(@button-bg, 16%);
      background-color: @active-bg;
      border-color: @active-bg;
      .colorize(@button-bg; @contrast-standard*.8);
    }
}

// .button-color(@color; @contrast-standard: 3;) when (default()) {
//   @button-bg: @color;
//   .invert-text-against(@button-bg; @contrast-standard;);
//   .button-borders(@button-bg);

//   &:focus {
//     // background-color: lighten(@button-bg, 16%);
//     .invert-text-against(@button-bg; @contrast-standard*.8;);
//   }

//   &:active {
//     .invert-text-against(@button-bg; @contrast-standard*1.2;);
//     border-color: darken(@button-bg, 16%);
//     color: mix(@button-bg, white, 16%);
//   }
// }

.button-elements({
 
  &:focus {outline:none;}
  &::-moz-focus-inner {border:0;}

  &:focus {
    &:extend(button.focus);
  }
});


