.button-elements({
    .default(margin-bottom);
    .default(border);
    .default(border-radius);
  
    display: inline-block;
    .button-color(@action);
    font-family: inherit;
    font-size: 125%; 
    width: 100%;
    line-height: @line-height*2;
    text-align: center;
    vertical-align: middle;
    background-image: none;
    outline: none;
    border: none;
    white-space: nowrap;
    text-decoration: none;
    touch-action: manipulation;
    cursor: pointer;
    .no-user-select;

    .make-buttons-for(@semantic-colors);
    
    .on-tablet({
      width: auto;
    });
  
    &:disabled {
      .button-color(@gray-lighter) !important;
      opacity: .5;
    }
});
  
.make-buttons-for(@colors) {
    // make buttons for a list of color variable names
    // buttons will use variable names as class names
  
    @length: length(@colors);
  
    .make-button();
  
    .make-button(@index:1) when (@index <= @length) {
      @color-name: extract(@colors, @index);
      @color: @@color-name;
  
      &.@{color-name} { .button-color(@color);}
  
      .make-button(@index + 1);
    }
}

.button-borders(@color) {
  .set-border-color() {
    .set-lumafix(@color; @gray; 25%;);
    border-color: @lumafix;
  }

  .set-border-top-color() {
    .set-lumafix(@color; @gray-lighter; 25%;);
    border-top-color: @lumafix;
  }

  .set-border-bottom-color() {
    .set-lumafix(@color; @gray-dark; 25%;);
    border-bottom-color: @lumafix;
  }

  .set-border-color();
  .set-border-top-color();
  .set-border-bottom-color();
}

.button-color(@color; @contrast-standard: 4.5;) 
                      when (@color = @highlight)
                        or (@color = @accent)
                        or (@color = @warning)
                        or (@color = @info) {
    @button-bg: @color;
    .set-tone(@button-bg);
    .colorize(@button-bg; @contrast-standard);
    .button-borders(@button-bg);

    &:active {
      @active-bg: mix(@button-bg, @tone, 80%);
      background-color: @active-bg;
    }
}

.button-color(@color; @contrast-standard: 3;) when (default()) {
  @button-bg: @color;
  .invert-text-against(@button-bg; @contrast-standard;);
  .button-borders(@button-bg);

  &:active {
    .invert-text-against(@button-bg; @contrast-standard*1.5;);
  }
}