.button-elements({
    .default(margin-bottom);
    .default(border);
    .default(border-radius);
    .default(font-size);
    .default(box-shadow);
  
    display: inline;
    .button-color(@action);
    // padding: 0 .5rem .25rem .5rem;
    // font-family: inherit;
    font-size: 100%; 
    width: 100%;
    // .default(padding-left);
    // .default(padding-right);
    // .default(padding);
    padding: @text-padding;
    padding: @padding @padding*@golden-ratio;
    line-height: 1;
    text-align: center;
    vertical-align: middle;
    background-image: none;
    outline: none;
    white-space: nowrap;
    text-decoration: none;
    touch-action: manipulation;
    cursor: pointer;
    .no-user-select;
    border: 1px solid transparent;
    transform: scale(1);
    transition: .08s linear;
    .make-buttons-for(@semantic-colors);

    &:focus {
      box-shadow: 0 1px 2px rgba(red(@gray-darker), green(@gray-darker), blue(@gray-darker), .5);
    }

    &:active {
      transform: scale(.98);
      box-shadow: 0 1px 1px rgba(red(@gray-darker), green(@gray-darker), blue(@gray-darker), .25);
    }

    // TODO: better font conventions
    & when (@serif = true) {
      font-family: Constantia, "Lucida Bright", Lucidabright, "Lucida Serif", Lucida, "DejaVu Serif", "Bitstream Vera Serif", "Liberation Serif", Georgia, serif;
    }

    & when (@sans-serif = true) {
        font-family:  "Helvetica Neue",
                -apple-system,
                BlinkMacSystemFont,
                "Segoe UI",
                Roboto,
                Oxygen-Sans,
                Ubuntu,
                Cantarell,
                sans-serif;
    }

    & when (@monospace = true) {
        font-family:
          "SFMono-Regular",
          Consolas,
          "Liberation Mono",
          Menlo,
          Courier,
          monospace;
    }

    .on-tablet({
      width: auto;
      margin-right: @padding;

      &:last-child {
        margin-right: 0;
      }
    });
});
  
.make-buttons-for(@colors) {
    // make buttons for a list of color variable names
    // buttons will use variable names as class names
  
    @length: length(@colors);
  
    .make-button();
  
    .make-button(@index:1) when (@index <= @length) {
      @color-name: extract(@colors, @index);
      @color: @@color-name;
  
      &.@{color-name} { .button-color(@color);}
  
      .make-button(@index + 1);
    }
}

.button-color(@color; @cr: 9;) {
    @button-bg: @color;

    & when (@color = @highlight) 
        or (@color = @warning) 
        or (@color = @accent)
        or (@color = @info) {
      .colorize(@button-bg; @cr;);
      .contrast(@button-bg; @cr/4; border-color; shade;);
      &:focus {
        background-color: lighten(@button-bg, 16%);
        .contrast(@button-bg; @cr/6; border-color; shade;);
      }
      &:active {
        .set-lumafix(@button-bg; @gray;);
        .colorize(darken(@button-bg, 12%); @cr*.6);
        .contrast(@button-bg; @cr/3*.6; border-color; shade;);
      }
    }

    & when (@color = @action) 
        or (@color = @reaction) 
        or (@color = @alternate)
        or (@color = @success)
        or (@color = @failure) {
          .invert-text-against(@button-bg; @cr/2;);
          .contrast(@button-bg; @cr/3; border-color; shade;);
          &:focus {
            .invert-text-against(@button-bg; @cr/4;);
            .set-lumafix(@button-bg; @gray-light; @strength: 75%;);
            background-color: @lumafix;
            .contrast(@button-bg; @cr/4; border-color; shade;);
          }
          &:active {
            .invert-text-against(@button-bg; @cr*.6);
            .contrast(@button-bg; @cr*2*.8; border-color; shade;);
          }
    }

    // .button-borders(@button-bg);

    & when (luma(@color) < 10%) {
      color: white;
    }
}

.button-elements({
 
  &:focus {outline:none;}
  &::-moz-focus-inner {border:0;}
});


