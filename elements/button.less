.button-elements({
    .default(margin-bottom);
    .default(border);
    .default(border-radius);
    .default(font-size);
    .default(box-shadow);
  
    display: inline;
    .button-color(@action);
    // padding: 0 .5rem .25rem .5rem;
    // font-family: inherit;
    font-size: 100%; 
    width: 100%;
    // .default(padding-left);
    // .default(padding-right);
    // .default(padding);
    padding: @padding @golden-ratio*@padding;
    line-height: @line-height*@golden-ratio;
    text-align: center;
    vertical-align: middle;
    background-image: none;
    outline: none;
    border: none;
    white-space: nowrap;
    text-decoration: none;
    touch-action: manipulation;
    cursor: pointer;
    .no-user-select;
    border: 1px solid transparent;
    .make-buttons-for(@semantic-colors);


    // TODO: better font conventions
    & when (@serif = true) {
      font-family: Constantia, "Lucida Bright", Lucidabright, "Lucida Serif", Lucida, "DejaVu Serif", "Bitstream Vera Serif", "Liberation Serif", Georgia, serif;
    }

    & when (@sans-serif = true) {
        font-family:  "Helvetica Neue",
                -apple-system,
                BlinkMacSystemFont,
                "Segoe UI",
                Roboto,
                Oxygen-Sans,
                Ubuntu,
                Cantarell,
                sans-serif;
    }

    & when (@monospace = true) {
        font-family:
          "SFMono-Regular",
          Consolas,
          "Liberation Mono",
          Menlo,
          Courier,
          monospace;
    }

    .on-tablet({
      width: auto;
      margin-right: @padding;

      &:last-child {
        margin-right: 0;
      }
    });
});
  
.make-buttons-for(@colors) {
    // make buttons for a list of color variable names
    // buttons will use variable names as class names
  
    @length: length(@colors);
  
    .make-button();
  
    .make-button(@index:1) when (@index <= @length) {
      @color-name: extract(@colors, @index);
      @color: @@color-name;
  
      &.@{color-name} { .button-color(@color);}
  
      .make-button(@index + 1);
    }
}

.button-color(@color; @cr: 9;) {
    @button-bg: @color;

    & when (@color = @highlight) 
        or (@color = @warning) 
        or (@color = @accent)
        or (@color = @info) {
      .colorize(@button-bg; @cr;);
      .contrast(@button-bg; @cr/3; border-color; shade;);
      &:active {
        .colorize(@button-bg; @cr*.6);
        .contrast(@button-bg; @cr/3*.6; border-color; shade;);
        transform: scale(.98);
      }
      &:focus {
        background-color: lighten(@button-bg, 16%);
      }
    }

    & when (@color = @action) 
        or (@color = @reaction) 
        or (@color = @alternate)
        or (@color = @success)
        or (@color = @failure) {
          .invert-text-against(@button-bg; @cr/2;);
          .contrast(@button-bg; @cr*2; border-color; shade;);
          &:active {
            .invert-text-against(@button-bg; @cr*.6);
            .contrast(@button-bg; @cr*2*.8; border-color; shade;);
            transform: scale(.98);
          }
          &:focus {
            .invert-text-against(@button-bg; @cr/3.5;);
            .set-lumafix(@button-bg, @gray-light);
            background-color: @lumafix;
          }
    }

    .set-lumafix(@color; white; 65%;);
    @ambient: @lumafix;
    @strong: rgba(red(@ambient), green(@ambient), blue(@ambient), 1);
    @medium: rgba(red(@ambient), green(@ambient), blue(@ambient), .6);
    @weak: rgba(red(@ambient), green(@ambient), blue(@ambient), .4);

    @shadow-base: @gray-darker;
    @s1: rgba(red(@shadow-base), green(@shadow-base), blue(@shadow-base), .2);
    @s2: rgba(red(@shadow-base), green(@shadow-base), blue(@shadow-base), .1);
    @s3: rgba(red(@shadow-base), green(@shadow-base), blue(@shadow-base), .05);

    @list: @medium 0%, transparent 50%, transparent 80%, @s2 100%;
    // background-image: svg-gradient(to bottom, @list);
    background-repeat: repeat-x;

    &:focus {
      @list: @strong 0%, transparent 50%, @s3 100%;
      // background-image: svg-gradient(to bottom, @list);
      box-shadow: 0 1px 2px rgba(red(@gray-darker), green(@gray-darker), blue(@gray-darker), .5);
    }

    &:active {
      @list: @weak 0%, transparent 55%, @s1 100%;
      // background-image: svg-gradient(to bottom, @list);
      box-shadow: 0 1px 1px rgba(red(@gray), green(@gray), blue(@gray), .5);
    }

    // .button-borders(@button-bg);

    & when (luma(@color) < 10%) {
      color: white;
    }

    

    
}

// .button-color(@color; @contrast-standard: 3;) when (default()) {
//   @button-bg: @color;
//   .invert-text-against(@button-bg; @contrast-standard;);
//   .button-borders(@button-bg);

//   &:focus {
//     // background-color: lighten(@button-bg, 16%);
//     .invert-text-against(@button-bg; @contrast-standard*.8;);
//   }

//   &:active {
//     .invert-text-against(@button-bg; @contrast-standard*1.2;);
//     border-color: darken(@button-bg, 16%);
//     color: mix(@button-bg, white, 16%);
//   }
// }

.button-elements({
 
  &:focus {outline:none;}
  &::-moz-focus-inner {border:0;}
});


