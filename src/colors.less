// color creation variables
@color-strength: 75% + 15%*(unit(luma(@base-color))/100);
@ambient-mix: 84%;
@compare-mix: 80%;
@compare-color: mix(screen(@ambient, @lumafix), overlay(@ambient, @lumafix), 50%);

// name and variable lists
// name lists: all of these have (and must have) corresponding variables generated by colors.less
// decent uses name lists any time a variable name also needs to be a class name
// variable lists: like the name lists, but these refer to the actual color, not the name

// removing names here will remove support for that semantic class

@semantic-color-names:   action, reaction, info, warning, success, failure, default;
@semantic-class-names:   @semantic-color-names;
@semantic-colors:   @action, @reaction, @info, @warning, @success, @failure, @default;

@gray-names: black, white, gray-lighter, gray-light, gray-medium, ~"gray", gray-dark, gray-darker;
@grays: @black, @white, @gray-lighter, @gray-light, @gray-medium, @gray, @gray-dark, @gray-darker;

@palette-colors: @tan, @royalpurple, @olivedrab, @chocolate, @vanilla, @strawberry, @orchid, @sand, @graphite, @goldenrod, @mint, @wheat, @steel, @slate, @cream, @bacon, @platinum, @twilight, @mist, @snow, @plum, @seafoam, @seagreen, @grapefruit, @cornhusk, @scarlet, @tangerine, @army, @ultramarine, @midnight, @turquoise, @peach, @coral, @cobalt, @copper, @hotpink, @neongreen, @khaki, @gold, @silver, @bronze, @gunmetal, @salmon, @iron, @lavender, @crimson, @clover, @charcoal, @red, @electricblue, @orange, @yellow, @lemon, @olive, @drab, @green, @teal, @aquamarine, @cyan, @skyblue, @blue, @indigo, @violet, @magenta, @purple, @brown, @pink, @lime, @navy;
@palette-color-names: ~"tan", ~"royalpurple", ~"olivedrab", ~"chocolate", ~"vanilla", ~"strawberry", ~"orchid", ~"sand", ~"graphite", ~"goldenrod", ~"mint", ~"wheat", ~"steel", ~"slate", ~"cream", ~"bacon", ~"platinum", ~"twilight", ~"mist", ~"snow", ~"plum", ~"seafoam", ~"seagreen", ~"grapefruit", ~"cornhusk", ~"scarlet", ~"tangerine", ~"army", ~"ultramarine", ~"midnight", ~"turquoise", ~"peach", ~"coral", ~"cobalt", ~"copper", ~"hotpink", ~"neongreen", ~"khaki", ~"gold", ~"silver", ~"bronze", ~"gunmetal", ~"salmon", ~"iron", ~"lavender", ~"crimson", ~"clover", ~"charcoal", ~"red", ~"electricblue", ~"orange", ~"yellow", ~"lemon", ~"olive", ~"drab", ~"green", ~"teal", ~"aquamarine", ~"cyan", ~"skyblue", ~"blue", ~"indigo", ~"violet", ~"magenta", ~"purple", ~"brown", ~"pink", ~"lime", ~"navy";


// grays 

@gray-mix: 30%;
@gray-base: desaturate(@base-color, 85%);
@gray-medium: mix(lighten(black, 50%), @gray-base, @gray-mix);
@gray: @gray-medium;

.set-white();
.set-gray-lighter();
.set-gray-light();

.set-black();
.set-gray-darker();
.set-gray-dark();


.set-white() {
	// @white: mix(white, @base-color, 99%);

	@base: white;
    .set-lumafix(@base; @strength: 10%;);
    @white: mix(@lumafix, @compare-color, @compare-mix);
}

.set-black() {
	// @black: mix(black, @base-color, 80%);

	@base: black;
    .set-lumafix(@base; @strength: 10%;);
    @black: mix(@lumafix, @compare-color, @compare-mix);
}

.set-gray-lighter() {
  .set-contrast-ceiling(@gray-base);
  .set-contrast(@gray-base; @contrast-ceiling*.92; @mode: tint;);
  @gray-lighter-base: @contrast;
  @gray-lighter: mix(lighten(black, 84%), @gray-lighter-base, @gray-mix);
}

.set-gray-light() {
  @gray-light-base: mix(@gray-base, @gray-lighter, 67%);
  @gray-light: mix(lighten(black, 75%), @gray-light-base, @gray-mix);
}

.set-gray-dark() {
  @gray-dark-base: mix(@gray-base, @gray-darker, 67%);
  @gray-dark: mix(lighten(black, 25%), @gray-dark-base, @gray-mix);
}

.set-gray-darker() {
  .set-contrast-floor(@gray-base);
  .set-contrast(@gray-base; @contrast-floor*.5; @mode: shade;);
  @gray-darker-base: @contrast;
  @gray-darker: mix(lighten(black, 16%), @gray-darker-base, @gray-mix);
}


@grey-lighter: @gray-lighter;
@grey-light: @gray-light;
@grey-medium: @gray-medium;
@grey: @gray;
@grey-dark: @gray-dark;
@grey-darker: @gray-darker;



// create palette colors

.set-palette-colors();

.set-palette-colors() {
    .set-red();
    .set-orange();
    .set-yellow();
    .set-olive();
    .set-green();
    .set-teal();
    .set-cyan();
    .set-skyblue();
    .set-blue();
    .set-indigo();
    .set-violet();
    .set-magenta();
    .set-purple();
	.set-brown();
	.set-pink();
	.set-lime();
	.set-navy();
	.set-drab();
	.set-lemon();
	.set-electricblue();
	.set-aquamarine();
	.set-charcoal();
	.set-crimson();
	.set-clover();
	.set-iron();
	.set-lavender();
	.set-salmon();
	.set-gunmetal();
	.set-khaki();
	.set-gold();
	.set-silver();
	.set-bronze();
	.set-hotpink();
	.set-neongreen();
	.set-cobalt();
	.set-copper();
	.set-coral();
	.set-peach();
	.set-turquoise();
	.set-midnight();
	.set-ultramarine();
	.set-army();
	.set-tangerine();
	.set-scarlet();
	.set-cornhusk();
	.set-seagreen();
	.set-grapefruit();
	.set-plum();
	.set-seafoam();
	.set-mist();
	.set-snow();
	.set-twilight();
	.set-platinum();
	.set-cream();
	.set-bacon();
	.set-steel();
	.set-slate();
	.set-mint();
	.set-wheat();
	.set-graphite();
	.set-goldenrod();
	.set-orchid();
	.set-sand();
	.set-chocolate();
	.set-vanilla();
	.set-strawberry();
	.set-olivedrab();
	.set-tan();
	.set-royalpurple();
}

.set-red() {
    @base: red;
    .set-lumafix(@base; @strength: @color-strength/2;);
    @red: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-orange() {
    @base: orange;
    .set-lumafix(@base; @strength: @color-strength/3;);
    @orange: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-yellow() {
    @base: yellow;
    .set-lumafix(@base; @strength: @color-strength/4;);
    @yellow: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-olive() {
    @base: average(olive, olivedrab);
    .set-lumafix(@base; @strength: @color-strength/3;);
    @olive: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-green() {
    @base: green;
    .set-lumafix(@base; @strength: @color-strength/2;);
    @green: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-teal() {
    @base: teal;
    .set-lumafix(@base; @strength: @color-strength*(2/3););
    @teal: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-cyan() {
    @base: cyan;
    .set-lumafix(@base; @strength: @color-strength/3;);
    @cyan: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-skyblue() {
    @base: average(skyblue, deepskyblue);
    .set-lumafix(@base; @strength: @color-strength/2;);
    @skyblue: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-blue() {
    @base: average(cornflowerblue, royalblue);
    .set-lumafix(@base; @strength: @color-strength/2;);
    @blue: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-indigo() {
    @base: indigo;
    .set-lumafix(@base; @strength: @color-strength/2;);
	@indigo: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-violet() {
    @base: violet;
    .set-lumafix(@base; @strength: @color-strength*(2/3););
    @violet: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-magenta() {
    @base: mix(magenta, darkmagenta, 60%);
    .set-lumafix(@base; @strength: @color-strength*(2/3););
    @magenta: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-purple() {
    @base: purple;
    .set-lumafix(@base; @strength: @color-strength*(2/3););
    @purple: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-brown() {
    @base: sienna;
    .set-lumafix(@base; @strength: @color-strength*(5/6););
	@brown-base: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
	.bump-brown();

	.bump-brown() when (luma(@brown-base) > luma(@indigo)) {
		.set-lumafix(@brown-base, @indigo);
		@brown: @lumafix;
	}

	.bump-brown() when (default()) {
		@brown: @brown-base;
	}
}

.set-aquamarine() {
	@base: aquamarine;
    .set-lumafix(@base; @strength: @color-strength/2;);
    @aquamarine: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-electricblue() {
	.set-average(#7DF9FF, royalblue, cyan;);
    .set-lumafix(@average; @strength: @color-strength/3;);
    @electricblue: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-lemon() {
	.set-average(lemonchiffon, yellow, yellow, greenyellow, greenyellow;);
	@base: @average;
	// @base: average(lemonchiffon, yellow);
    .set-lumafix(@base; @strength: @color-strength/4;);
    @lemon: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-drab() {
	@base: average(olivedrab, tan);
    .set-lumafix(@base; @strength: @color-strength/2;);
    @drab: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-pink() {
    .set-average(pink, pink, white;);
    .set-lumafix(@average; @strength: @color-strength/3;);
    @pink: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-lime() {
    .set-average(lime, limegreen, lemonchiffon;);
    .set-lumafix(@average; @strength: @color-strength/4;);
    @lime: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-navy() {
    @base: mix(navy, steelblue, 67%);
    .set-lumafix(@base; @strength: @color-strength/2;);
    @navy: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-charcoal() {
	.set-average(@black, @brown, @gray;);
	@charcoal: @average;
}

.set-crimson() {
	@base: average(crimson, darkred);
    .set-lumafix(@base; @gray-dark; @strength: @color-strength/2;);
    @crimson: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-clover() {
	.set-average(forestgreen, lawngreen, lime;);
    .set-lumafix(@average; @gray-dark; @strength: @color-strength/3;);
    @clover: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-iron() {
    .set-average(darkred, brown, darkslategray, black, black;);
    .set-lumafix(@average; @strength: @color-strength/3;);
    @iron: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-lavender() {
    @base: lavender;
    .set-lumafix(@base; @strength: @color-strength/3;);
    @lavender: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-salmon() {
    @base: salmon;
    .set-lumafix(@base; @strength: @color-strength/3;);
    @salmon: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-gunmetal() {
    .set-average(steelblue, gray, black;);
    .set-lumafix(@average; @strength: @color-strength/4;);
    @gunmetal: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-khaki() {
    @base: average(khaki, darkkhaki);
    .set-lumafix(@base; @strength: @color-strength*(2/3););
    @khaki: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-gold() {
    @base: average(gold, yellow);
    .set-lumafix(@base; @strength: @color-strength/4;);
    @gold: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-silver() {
    @base: mix(silver, gold, 90%);
    .set-lumafix(@base; @strength: @color-strength/4;);
    @silver: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-bronze() {
    @base: mix(peru, gold, 80%);
    .set-lumafix(@base; @strength: @color-strength/3;);
    @bronze: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-hotpink() {
    @base: hotpink;
    .set-lumafix(@base; @strength: @color-strength/4;);
    @hotpink: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-neongreen() {
    @base: #39FF14;
    .set-lumafix(@base; @strength: @color-strength/4;);
	@neongreen: 
	mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-cobalt() {
    @base: average(mediumblue, dodgerblue);
    .set-lumafix(@base; @strength: @color-strength/3;);
    @cobalt: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-copper() {
    .set-average(pink, orange, brown;);
    .set-lumafix(@average; @strength: @color-strength/2;);
    @copper: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-coral() {
    @base: coral;
    .set-lumafix(@base; @strength: @color-strength/2;);
    @coral: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-peach() {
    @base: peachpuff;
    .set-lumafix(@base; @strength: @color-strength/2;);
    @peach: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-turquoise() {
    @base: turquoise;
    .set-lumafix(@base; @strength: @color-strength/3;);
    @turquoise: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-midnight() {
    .set-average(@black, @navy, @purple, @gray-darker;);
    .set-lumafix(@average; @strength: @color-strength/3;);
	@midnight: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
	@midnight: @average;
}

.set-ultramarine() {
    @base: #120A8F;
    .set-lumafix(@base; @strength: @color-strength/3;);
    @ultramarine: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-army() {
    .set-average(forestgreen, darkolivegreen;);
    .set-lumafix(@average; @strength: @color-strength/2;);
    @army: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-tangerine() {
    @base: mix(orange, pink, 70%);
    .set-lumafix(@base; @strength: @color-strength/3;);
    @tangerine: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-scarlet() {
    @base: #FF2400;
    .set-lumafix(@base; @strength: @color-strength/4;);
    @scarlet: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-cornhusk() {
    .set-average(yellow, green, lemonchiffon;);
    .set-lumafix(@average; @strength: @color-strength/4;);
    @cornhusk: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-seagreen() {
    @base: average(seagreen, mediumseagreen);
    .set-lumafix(@base; @strength: @color-strength/3;);
    @seagreen: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-grapefruit() {
    @base: #d61b38;
    .set-lumafix(@base; @strength: @color-strength/2;);
    @grapefruit: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-plum() {
    @base: plum;
    .set-lumafix(@base; @strength: @color-strength/3;);
    @plum: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-seafoam() {
    .set-average(cyan, aquamarine, white;);
    .set-lumafix(@average; @strength: @color-strength/3;);
    @seafoam: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-mist() {
    .set-average(skyblue, white, lavender;);
    .set-lumafix(@average; @strength: @color-strength/6;);
    @mist: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-snow() {
    @base: snow;
    .set-lumafix(@base; @strength: @color-strength/6;);
    @snow: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-twilight() {
    @base: #c55482;
    .set-lumafix(@base; @strength: @color-strength/3;);
    @twilight: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-platinum() {
    @base: #E5E4E2;
    .set-lumafix(@base; @strength: @color-strength/4;);
    @platinum: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-cream() {
    .set-average(mintcream, beige, white;);
    .set-lumafix(@average; @strength: @color-strength/6;);
    @cream: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-bacon() {
    @base: #a51303;
    .set-lumafix(@base; @strength: @color-strength/2;);
    @bacon: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-steel() {
    @base: average(steelblue, lightsteelblue, gray, white);
    .set-lumafix(@base; @strength: @color-strength/3;);
    @steel: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-slate() {
    .set-average(slateblue, darkslateblue, slategray, darkslategray, black;);
    .set-lumafix(@average; @strength: @color-strength*(2/3););
    @slate: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-wheat() {
    .set-average(wheat, palegoldenrod, lemonchiffon;);
    .set-lumafix(@average; @strength: @color-strength/3;);
    @wheat: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-mint() {
    .set-average(mintcream, darkturquoise, white, white;);
    .set-lumafix(@average; @strength: @color-strength/6;);
    @mint: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-graphite() {
	.set-average(black, navy, gray, darkslategray;);
    .set-lumafix(@average; @strength: @color-strength/4;);
    @graphite: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-goldenrod() {
    @base: average(gold, goldenrod);
    .set-lumafix(@base; @strength: @color-strength/3;);
    @goldenrod: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-orchid() {
    @base: average(orchid, mediumorchid);
    .set-lumafix(@base; @strength: @color-strength/3;);
    @orchid: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-sand() {
    @base: average(sandybrown, seashell);
    .set-lumafix(@base; @strength: @color-strength/6;);
    @sand: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-chocolate() {
    @base: average(chocolate, saddlebrown, brown);
    .set-lumafix(@base; @strength: @color-strength/2;);
    @chocolate: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-vanilla() {
    @base: average(#F3E5AB, white);
    .set-lumafix(@base; @strength: @color-strength/6;);
    @vanilla: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-strawberry() {
    .set-average(hotpink, white, #dd0515;);
    .set-lumafix(@average; @strength: @color-strength/2;);
    @strawberry: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-olivedrab() {
    @base: olivedrab;
    .set-lumafix(@base; @strength: @color-strength*(2/3););
    @olivedrab: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-tan() {
    @base: tan;
    .set-lumafix(@base; @strength: @color-strength/4;);
    @tan: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

.set-royalpurple() {
    @base: rebeccapurple;
    .set-lumafix(@base; @strength: @color-strength/3;);
    @royalpurple: mix(@lumafix, overlay(@ambient, @lumafix), @ambient-mix);
}

// iron 
// copper

// semantic colors 

@color-wheel: 
		@red,
		average(@red, @orange),
		@orange,
		average(@orange, @yellow),
		@yellow,
		average(@yellow, @olive),
		@olive,
		average(@olive, @green),
		@green,
		average(@green, @teal),
		@teal,
		average(@teal, @cyan),
		@cyan,
		average(@cyan, @skyblue),
		@skyblue,
		average(@skyblue, @blue),
		@blue,
		average(@blue, @indigo),
		@indigo,
		average(@indigo, @purple),
		@purple,
		average(@purple, @violet),
		@violet,
		average(@violet, @red);

.set-color-bases() {

	@offset: 3;

	// @base-color: @base-color;

	.set-rep-color(@base-color; @color-wheel;);
	
	@number: @rep-color-number;

	.set-bases();

	.set-bases() when (@number >= 18) {
		@info-base: extract(@color-wheel, @number - @offset);
	}

	.set-bases() when (@number > 12) and (@number < 18) {
		@info-base: extract(@color-wheel, @number - @offset);
	}

	.set-bases() when (@number > 6) and (@number <= 12) {
		@info-base: extract(@color-wheel, @number + @offset);
	}

	.set-bases() when (@number <= 6) {
		@info-base: extract(@color-wheel, @number + @offset);
	}

	
}

.set-color-bases();
.set-action();
.set-reaction();

.set-info();
.set-warning();
.set-success();

.set-failure();
.set-default();

.set-action() {
	@action: @base-color;
	
	.bump-action() when (luma(@action) < 30%) {
		// bump it up to at least @warning's brightness if it's not there
		.set-lumafix(@base-color; @gray-light; 100%);
		@action: mix(@lumafix, overlay(@ambient, @lumafix), 90%);
	}

	.bump-action() when (default()) {
		@action: mix(@base-color, overlay(@ambient, @lumafix), 90%);
	}

	.bump-action();
}

.set-action() when (@base-color = white) { @action: white;}
.set-action() when (@base-color = black) { @action: black;}

.set-reaction() {
	// reaction is for responding, usually after an action
	// a good second step or confirmation color 
	// reaction is typically close to being a complement of action 

	@reaction-base: difference(@base-color, white);
	.set-lumafix(@reaction-base; @strength: 90%;);
    @reaction: @lumafix;
}

.set-reaction() when (@base-color = white) { @reaction: black;}
.set-reaction() when (@base-color = black) { @reaction: white;}

.set-warning() {
	// warning is a high urgency version of its pairing, info
	// its orange/yellow is a complement to info's teal/blue
	// remember: warning comes before the failure, failure after

	@warning-orange: @orange;
	@warning-yellow: @yellow;

	.set-distance-action() {
		.set-distance(@warning-orange, @base-color);
		@distance-action: @distance;
	}

	.set-distance-reaction() {
		.set-distance(@warning-orange, @reaction-base);
		@distance-reaction: @distance;
	}

	.set-warning-base() when (@distance-action < 100) or (@distance-reaction < 100) {
		@warning-base: @warning-yellow;
		
	}

	.set-warning-base() when (default()) {
		@warning-base: @warning-orange;

	}

	.set-warning-final() when (luma(@warning-base) < luma(@info)) {
		.set-lumafix(@warning-base; @info; 100%;);
		@warning: @lumafix;
	}

	.set-warning-final() when (default()) {
		@warning: @warning-base;
	}

	.set-distance-action();
	.set-distance-reaction();
	.set-warning-base();
	.set-warning-final();
}

.set-success() {
	// success indicates that an action worked or a positive response came through
	// its green tells users they're good to go 

	@success-green: @green;
	@success-lightgreen: @lime;

	.set-distance-action() {
		.set-distance(@success-green, @base-color);
		@distance-action: @distance;
	}

	.set-distance-reaction() {
		.set-distance(@success-green, @reaction-base);
		@distance-reaction: @distance;
	}

	.set-success-base() when (@distance-action < 100) or (@distance-reaction < 100) {
		@success-base: @success-lightgreen;
	}

	.set-success-base() when (default()) {
		@success-base: @success-green;
	}

	.set-success-final() when (luma(@base-color) < 30%) {
		.set-lumafix(@success-base, @green, @strength: 85%);
		@success-final: @lumafix;
	}

	.set-success-final() when (default()) {
		.set-lumafix(@success-base, @green, @strength: 40%);
		@success-final: @lumafix;
	}

	.bump-success() when (luma(@success-final) < luma(@warning)) {
		// bump it up to near @warning's brightness if it's not there
		.set-lumafix(@success-final; @warning; 50%);
		@success: @lumafix;
	}

	.bump-success() when (default()) {
		@success: @success-final;
	}

	.set-distance-action();
	.set-distance-reaction();

	.set-success-base();

	.set-success-final();
	.bump-success();
}

.set-failure() {
	// success's opposite and complement, failure's red tells the user something is wrong 
	// good for negative server responses, missing info, or drawing attention to faults

	@failure-red: @red;
	@failure-violet: @violet;

	.set-distance-action() {
		.set-distance(@failure-red, @action);
		@distance-action: @distance;
	}

	.set-distance-reaction() {
		.set-distance(@failure-red, @reaction);
		@distance-reaction: @distance;
	}

	.set-failure-base() when (@distance-action < 70) or (@distance-reaction < 70) {
		@failure-base: @failure-violet;
	}

	.set-failure-base() when (default()) {
		@failure-base: @failure-red;
	}

	.set-failure-final() when (default()) {
		@failure: @failure-base;
	}

	.set-distance-action();
	.set-distance-reaction();

	.set-failure-base();

	.set-failure-final();
}

.set-info() {
	// info is meant to be used sparingly with @action, @reaction and @alternate 
	// its extra saturation and lightness is good for drawing attention, like
	// a less urgent warning

	.set-lumafix(@alt-info-base; @strength: 50%);
	@alt-info-base: spin(@info-base, 180);
	@alt-info: @lumafix;

	.set-distance-warning() {
		.set-distance(@info-base, @orange);
		@distance-warning: @distance;
	}

	.set-distance-success() {
		.set-distance(@info-base, @green);
		@distance-success: @distance;
	}

	.set-new-info-base() {
		@new-info-base: @info-base;
	}

	.set-new-info-base() when (@distance-warning < 150) or (@distance-success < 150) {
		@new-info-base: @alt-info;
	}

	.set-info-final() {
		@info-final: mix(@new-info-base, overlay(@ambient, @new-info-base), 90%);
	}

	.bump-info() when (luma(@info-final) < luma(@orange)) {
		// bump it up to at least @orange's brightness if it's not there
		.set-lumafix(@info-final; @orange; 100%);
		@info: mix(@lumafix, overlay(@ambient, @lumafix), 90%);
	}

	.bump-info() when (default()) {
		@info: @info-final;
	}

	.set-distance-warning();
	.set-distance-success();
	.set-new-info-base();
	.set-info-final();
	.bump-info();
}

.set-default() {
	// a nondescript color that blends in and works as a default

	.set-average(@reaction, @info, @warning, @success, @failure;);
	.set-lumafix(@rep-color; @strength: 80%;);
	@default: mix(@average, mix(@lumafix, overlay(@ambient, @lumafix), 90%), 62%);
}