// utility classes

// .inner-*-width classes set a faux-inner-width using padding and calc()

.inner-max-width {
  @half-max-width: @max-width/2;
  @padding: ~"calc(50% - @{half-max-width})";
  position: relative;
  padding-left: @padding;
  padding-right: @padding;

  > .right {
    right: @padding;
  }

  > .left {
    left: @padding;
  }
}

.inner-column-width {
  position: relative;
  // padding-left: @gutter;
  // padding-right: @gutter;

  .on-tablet({
    @half-column-width: @column-width/2;
    @padding: ~"calc(50% - @{half-column-width})";

    padding-left: @padding;
    padding-right: @padding;
    
    > .right {
      right: @padding;
    }
  
    > .left {
      left: @padding;
    }
  });
}

.inner-page-width {
  position: relative;
  padding-left: @gutter;
  padding-right: @gutter;

  .on-desktop({
    @half-page-width: @page-width/2;
    @padding: ~"calc(50% - @{half-page-width})";
    
    padding-left: @padding;
    padding-right: @padding;

    > .right {
      right: @padding;
    }
  
    > .left {
      left: @padding;
    }
  });
}

.big {
  font-size: 125%;
}

.small {
  font-size: 90%;
  line-height: @line-height*.90;
}

.text-padding {
  padding: @text-padding;
}

.block {
  display: block;
}

.inline {
  display: inline;
}

.table {
  display: table;
}

.flex {
  display: flex;
}

.grid {
  display: grid;
}

.inline-block {
  display: inline-block;
}

.static {
  position: static;
}

.absolute {
  position: absolute;
}

.relative {
  position: relative;
}

.fixed {
  position: fixed;
}

.transparent {
  color: inherit;
  position: ;
  background: transparent;
}

.float-right {
  float: right;
}

.float-left {
  float: left;
}

.margin-auto {
  margin-left: auto;
  margin-right: auto;
}

.inset {
  box-shadow: inset @box-shadow;
}

.viewport-height {
  height: 100vh;
}

.inverted {}

.disabled {}

.fade {
  opacity: .8;
}

@grid-width: (@page-width - @text-padding-right*11)/12;


.grid {
  display: grid;
  grid-gap: @padding;
  grid-template-columns: auto auto auto auto auto auto auto auto auto auto auto auto;
}

.grid-width {
  // width: @grid-width;
  grid-column-end: span 1;
}
.grid-width-one {
  &:extend(.grid-width);
}
// .grid-width-two {
//   width: @grid-width*2 + @text-padding-right;
// }
// .grid-width-three {
//   width: @grid-width*3 + @text-padding-right*2;
// }
// .grid-width-four {
//   width: @grid-width*4 + @text-padding-right*3;
// }
// .grid-width-five {
//   width: @grid-width*5 + @text-padding-right*4;
// }
// .grid-width-six {
//   width: @grid-width*6 + @text-padding-right*5;
// }
// .grid-width-seven {
//   width: @grid-width*7 + @text-padding-right*6;
// }
// .grid-width-eight {
//   width: @grid-width*8 + @text-padding-right*7;
// }
// .grid-width-nine {
//   width: @grid-width*9 + @text-padding-right*8;
// }
// .grid-width-ten {
//   width: @grid-width*10 + @text-padding-right*9;
// }
// .grid-width-eleven {
//   width: @grid-width*11 + @text-padding-right*10;
// }
// .grid-width-twelve {
//   width: @grid-width*12 + @text-padding-right*11;
// }

.grid-width-two {
  grid-column-end: span 2;
}
.grid-width-three {
  grid-column-end: span 3;
}
.grid-width-four {
  grid-column-end: span 4;
}
.grid-width-five {
  grid-column-end: span 5;
}
.grid-width-six {
  grid-column-end: span 6;
}
.grid-width-seven {
  grid-column-end: span 7;
}
.grid-width-eight {
  grid-column-end: span 8;
}
.grid-width-nine {
  grid-column-end: span 9;
}
.grid-width-ten {
  grid-column-end: span 10;
}
.grid-width-eleven {
  grid-column-end: span 11;
}
.grid-width-twelve {
  grid-column-end: span 12;
}

.ascii {
  font-family: @font-family-monospace;
  padding: @text-padding;
  padding-left: 1ch;
  padding-right: 1ch;
}

.text-align-center {
  text-align: center;
}

.text-align-left {
  text-align: left;
}

.text-align-right {
  text-align: right;
}

.text-align-justify {
  text-align: justify;
}

.hide, .hidden { display: none !important;}

.clearfix {
  clear: both;
  &:after {
    display: block;
    clear: both;
    content: "";
  }
}

// semantic color names .colorize() when used as a class
each(@semantic-color-names, { 
  &.@{value} { .colorize(@@value);};
  &.color-@{value} { .color-text(@@value);};
});

// palette color names .colorize() when used as a class
each(@palette-color-names, { 
  &.@{value} { .colorize(@@value);};
  &.color-@{value} { .color-text(@@value);};
});

// gray color names .colorize() when used as a class
each(@gray-names, { 
  &.@{value} { .colorize(@@value);}
  &.color-@{value} { .color-text(@@value);};
;});