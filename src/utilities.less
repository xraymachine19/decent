// utility classes

.inner-max-width {
  @half-max-width: @max-width/2;
  @padding: ~"calc(50% - @{half-max-width})";
  position: relative;
  padding-left: @padding;
  padding-right: @padding;

  .right {
    right: @padding;
  }

  .left {
    left: @padding;
  }
}

.inner-column-width {
  position: relative;
  // padding-left: @gutter;
  // padding-right: @gutter;

  .on-tablet({
    @half-column-width: @column-width/2;
    @padding: ~"calc(50% - @{half-column-width})";

    padding-left: @padding;
    padding-right: @padding;
    
    .right {
      right: @padding;
    }
  
    .left {
      left: @padding;
    }
  });
}

.inner-page-width {
  position: relative;
  padding-left: @gutter;
  padding-right: @gutter;

  .on-desktop({
    @half-page-width: @page-width/2;
    @padding: ~"calc(50% - @{half-page-width})";
    
    padding-left: @padding;
    padding-right: @padding;

    .right {
      right: @padding;
    }
  
    .left {
      left: @padding;
    }
  });
}

.big {
  font-size: 125%;
}

.small {
  font-size: 90%;
  line-height: @line-height*.90;
}

.text-padding {
  padding: @text-padding;
}

.block {
  display: block;
}

.inline {
  display: inline;
}

.table {
  display: table;
}

.flex {
  display: flex;
}

.grid {
  display: grid;
}

.inline-block {
  display: inline-block;
}

.static {
  position: static;
}

.absolute {
  position: absolute;
}

.relative {
  position: relative;
}

.fixed {
  position: fixed;
}

.transparent {
  color: inherit;
  position: ;
  background: transparent;
}

.float-right {
  float: right;
}

.float-left {
  float: left;
}

.margin-auto {
  margin: 0 auto;
}

.inset {
  box-shadow: inset @box-shadow;
}

.inverted {}

.disabled {}

.ascii {
  font-family: @font-family-monospace;
  padding: @text-padding;
  padding-left: 1ch;
  padding-right: 1ch;
}

.text-align-center {
  text-align: center;
}

.text-align-left {
  text-align: left;
}

.text-align-right {
  text-align: right;
}

.text-align-justify {
  text-align: justify;
}

.hide, .hidden { display: none !important;}

.clearfix {
  clear: both;
  &:after {
    display: block;
    clear: both;
    content: "";
  }
}

// semantic color names .colorize() when used as a class
each(@semantic-color-names, { 
  &.@{value} { .colorize(@@value);};
  &.color-@{value} { .color-text(@@value);};
});

// palette color names .colorize() when used as a class
each(@palette-color-names, { 
  &.@{value} { .colorize(@@value);};
  &.color-@{value} { .color-text(@@value);};
});

// gray color names .colorize() when used as a class
each(@gray-names, { 
  &.@{value} { .colorize(@@value);}
  &.color-@{value} { .color-text(@@value);};
;});