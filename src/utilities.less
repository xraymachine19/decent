// utility classes

// .inner-*-width classes set a faux-inner-width using padding and calc()

.inner-max-width {
  @half-max-width: @max-width/2;
  @padding: ~"calc(50% - @{half-max-width})";
  position: relative;
  padding-left: @padding;
  padding-right: @padding;

  > .right {
    right: @padding;
  }

  > .left {
    left: @padding;
  }
}

.inner-column-width {
  position: relative;
  // padding-left: @gutter;
  // padding-right: @gutter;

  .on-tablet({
    @half-column-width: @column-width/2;
    @padding: ~"calc(50% - @{half-column-width})";

    padding-left: @padding;
    padding-right: @padding;
    
    > .right {
      right: @padding;
    }
  
    > .left {
      left: @padding;
    }
  });
}

.inner-page-width {
  position: relative;
  padding-left: @gutter;
  padding-right: @gutter;

  .on-desktop({
    @half-page-width: @page-width/2;
    @padding: ~"calc(50% - @{half-page-width})";
    
    padding-left: @padding;
    padding-right: @padding;

    > .right {
      right: @padding;
    }
  
    > .left {
      left: @padding;
    }
  });
}

.inner-gutter {
  padding: @gutter;
}

.reset {
  // all: unset;
  all: initial;
}

.big {
  font-size: 125%;
}

.small {
  font-size: 90%;
  line-height: @line-height*.90;
}

.text-padding {
  padding: @text-padding;
}

.block {
  display: block;
}

.inline {
  display: inline;
}

.table {
  display: table;
}

.flex {
  display: flex;
}

.inline-block {
  display: inline-block;
}

.static {
  position: static;
}

.absolute {
  position: absolute;
}

.relative {
  position: relative;
}

.fixed {
  position: fixed;
}

.transparent {
  color: inherit;
  position: ;
  background: transparent;
}

.float-right {
  float: right;
}

.float-left {
  float: left;
}

.margin-auto {
  margin-left: auto;
  margin-right: auto;
}

.inset {
  box-shadow: inset @box-shadow;
}

.viewport-height {
  height: 100vh;
}

.inverted {}

.disabled {}

.fade {
  opacity: .8;
}


.on-mobile({
  .tablet {
    > * {
      .full-width;
    }
  }
});

.light {
  @light-bg: "%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%202.646%202.646%22%20height%3D%2210%22%20width%3D%2210%22%3E%3Cpath%20fill%3D%22@{fg}%22%20fill-opacity%3D%22@{fill-opacity}%22%20d%3D%22M0%200h2.646v2.646H0z%22%2F%3E%3C%2Fsvg%3E";
  @pattern-base: @light-bg;

  @fill-opacity: .12;

  @fg-base: @white;

  // we need the foreground color inside the SVG to be in rgb(r,g,b) format
  @fg-red: floor(red(@fg-base));
  @fg-green: floor(green(@fg-base));
  @fg-blue: floor(blue(@fg-base));
  @fg: ~"rgb(@{fg-red},@{fg-green},@{fg-blue})";

  @pattern: url("data:image/svg+xml,@{pattern-base}");

  background-image: @pattern;
}

.lighter {
  @bg: "%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%202.646%202.646%22%20height%3D%2210%22%20width%3D%2210%22%3E%3Cpath%20fill%3D%22@{fg}%22%20fill-opacity%3D%22@{fill-opacity}%22%20d%3D%22M0%200h2.646v2.646H0z%22%2F%3E%3C%2Fsvg%3E";
  @pattern-base: @bg;

  @fill-opacity: .24;

  @fg-base: white;

  // we need the foreground color inside the SVG to be in rgb(r,g,b) format
  @fg-red: floor(red(@fg-base));
  @fg-green: floor(green(@fg-base));
  @fg-blue: floor(blue(@fg-base));
  @fg: ~"rgb(@{fg-red},@{fg-green},@{fg-blue})";

  @pattern: url("data:image/svg+xml,@{pattern-base}");

  background-image: @pattern;
}

.dark {
  @bg: "%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%202.646%202.646%22%20height%3D%2210%22%20width%3D%2210%22%3E%3Cpath%20fill%3D%22@{fg}%22%20fill-opacity%3D%22@{fill-opacity}%22%20d%3D%22M0%200h2.646v2.646H0z%22%2F%3E%3C%2Fsvg%3E";
  @pattern-base: @bg;

  @fill-opacity: .07;

  @fg-base: @black;

  // we need the foreground color inside the SVG to be in rgb(r,g,b) format
  @fg-red: floor(red(@fg-base));
  @fg-green: floor(green(@fg-base));
  @fg-blue: floor(blue(@fg-base));
  @fg: ~"rgb(@{fg-red},@{fg-green},@{fg-blue})";

  @pattern: url("data:image/svg+xml,@{pattern-base}");

  background-image: @pattern;
}

.darker {
  @bg: "%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%202.646%202.646%22%20height%3D%2210%22%20width%3D%2210%22%3E%3Cpath%20fill%3D%22@{fg}%22%20fill-opacity%3D%22@{fill-opacity}%22%20d%3D%22M0%200h2.646v2.646H0z%22%2F%3E%3C%2Fsvg%3E";
  @pattern-base: @bg;

  @fill-opacity: .14;

  @fg-base: black;

  // we need the foreground color inside the SVG to be in rgb(r,g,b) format
  @fg-red: floor(red(@fg-base));
  @fg-green: floor(green(@fg-base));
  @fg-blue: floor(blue(@fg-base));
  @fg: ~"rgb(@{fg-red},@{fg-green},@{fg-blue})";

  @pattern: url("data:image/svg+xml,@{pattern-base}");

  background-image: @pattern;
}

@grid-width: (@page-width - @text-padding-right*11)/12;

.on-tablet({
  .grid {
    display: grid;
    grid-gap: @padding;
    grid-template-columns: repeat(12, minmax(0, 1fr));
  }
  
  .grid-width-one {
    &:extend(.grid-width);
  }
  
  .grid-width-two {
    grid-column: auto / span 2;
  }
  .grid-width-three {
    grid-column: auto / span 3;
  }
  .grid-width-four {
    grid-column: auto / span 4;
  }
  .grid-width-five {
    grid-column: auto / span 5;
  }
  .grid-width-six {
    grid-column: auto / span 6;
  }
  .grid-width-seven {
    grid-column: auto / span 7;
  }
  .grid-width-eight {
    grid-column: auto / span 8;
  }
  .grid-width-nine {
    grid-column: auto / span 9;
  }
  .grid-width-ten {
    grid-column: auto / span 10;
  }
  .grid-width-eleven {
    grid-column: auto / span 11;
  }
  .grid-width-twelve {
    grid-column: auto / span 12;
  }
});

.placeholder {
  &::before { content: " "; white-space: pre;}
}

.ascii {
  font-family: @font-family-monospace;
  padding: @text-padding;
  padding-left: 1ch;
  padding-right: 1ch;
}

.text-align-center {
  text-align: center;
}

.text-align-left {
  text-align: left;
}

.text-align-right {
  text-align: right;
}

.text-align-justify {
  text-align: justify;
}

.hide, .hidden { display: none !important;}

.clearfix {
  clear: both;
  &::after {
    display: block;
    clear: both;
    content: "";
  }
}

// semantic color names .colorize() when used as a class
each(@semantic-color-names, { 
  &.@{value} { .colorize(@@value);};
  &.color-@{value} { .color-text(@@value);};
});

// palette color names .colorize() when used as a class
each(@palette-color-names, { 
  &.@{value} { .colorize(@@value);};
  &.color-@{value} { .color-text(@@value);};
});
