// even more named colors
// these work like semantic colors, but without the semantic meaning 

@base: @base-color;
@color-strength: 75% + 15%*(unit(luma(@base))/100);

.set-palette-colors();

.set-palette-colors() {
    .set-red();
    .set-orange();
    .set-yellow();
    .set-olive();
    .set-green();
    .set-teal();
    .set-cyan();
    .set-skyblue();
    .set-blue();
    .set-indigo();
    .set-violet();
    .set-magenta();
    .set-purple();
    .set-brown();
}

.set-lighter(@color) {
    .set-contrast-ceiling(@color);
    .set-contrast(@color; @contrast-ceiling/2; @mode: tint;);
    @lighter: @contrast;
}
.set-light(@color) {
    .set-contrast-ceiling(@color);
    .set-contrast(@color; @contrast-ceiling/3; @mode: tint;);
    @light: @contrast;
}
.set-darker(@color) {
    .set-contrast-ceiling(@color);
    .set-contrast(@color; @contrast-ceiling/2; @mode: shade;);
    @darker: @contrast;
}
.set-dark(@color) {
    .set-contrast-ceiling(@color);
    .set-contrast(@color; @contrast-ceiling/3; @mode: shade;);
    @dark: @contrast;
}

.set-red() {
    @base: average(tomato, firebrick);
    .set-lumafix(@base; @strength: @color-strength*(2/3););
    @red: @lumafix;
}

.set-orange() {
    @base: orange;
    .set-lumafix(@base; @strength: @color-strength/3;);
    @orange: @lumafix;
}

.set-yellow() {
    @base: yellow;
    .set-lumafix(@base; @strength: @color-strength/4;);
    @yellow: @lumafix;
}

.set-olive() {
    @base: average(olive, olivedrab);
    .set-lumafix(@base; @strength: @color-strength/2;);
    @olive: @lumafix;
}

.set-green() {
    @base: forestgreen;
    .set-lumafix(@base; @strength: @color-strength/2;);
    @green: @lumafix;
}

.set-teal() {
    @base: teal;
    .set-lumafix(@base; @strength: @color-strength*(2/3););
    @teal: @lumafix;
}

.set-cyan() {
    @base: cyan;
    .set-lumafix(@base; @strength: @color-strength/2;);
    @cyan: @lumafix;
}

.set-skyblue() {
    @base: lightskyblue;
    .set-lumafix(@base; @strength: @color-strength/2;);
    @skyblue: @lumafix;
}

.set-blue() {
    @base: average(cornflowerblue, royalblue);
    .set-lumafix(@base; @strength: @color-strength*(2/3););
    @blue: @lumafix;
}

.set-indigo() {
    @base: indigo;
    .set-lumafix(@base; @strength: @color-strength*(2/3););
    @indigo: @lumafix;
}

.set-violet() {
    @base: violet;
    .set-lumafix(@base; @strength: @color-strength/2;);
    @violet: @lumafix;
}

.set-magenta() {
    @base: magenta;
    .set-lumafix(@base; @strength: @color-strength*(2/3););
    @magenta: @lumafix;
}

.set-purple() {
    @base: purple;
    .set-lumafix(@base; @strength: @color-strength*(2/3););
    @purple: @lumafix;
}

.set-brown() {
    @base: sienna;
    .set-lumafix(@base; @strength: @color-strength*(2/3););
    @brown: @lumafix;
}

// grays 

@gray-mix: 30%;
@gray-base: desaturate(@base-color, 85%);
@gray-medium: mix(lighten(black, 50%), @gray-base, @gray-mix);
@gray: @gray-medium;

.set-white();
.set-gray-lighter();
.set-gray-light();

.set-black();
.set-gray-darker();
.set-gray-dark();

.set-white() {
  @white-mix: 90% + luma(@base-color)/10;
  @white: mix(white, @gray-medium, @white-mix);
}

.set-black() {
  @black-mix: 90% + luma(@base-color)/10;
  @black: mix(black, @gray-medium, @black-mix);
}

.set-gray-lighter() {
  .set-contrast-ceiling(@gray-base);
  .set-contrast(@gray-base; @contrast-ceiling*.92; @mode: tint;);
  @gray-lighter-base: @contrast;
  @gray-lighter: mix(lighten(black, 84%), @gray-lighter-base, @gray-mix);
}

.set-gray-light() {
  @gray-light-base: mix(@gray-base, @gray-lighter, 67%);
  @gray-light: mix(lighten(black, 75%), @gray-light-base, @gray-mix);
}

.set-gray-dark() {
  @gray-dark-base: mix(@gray-base, @gray-darker, 67%);
  @gray-dark: mix(lighten(black, 25%), @gray-dark-base, @gray-mix);
}

.set-gray-darker() {
  .set-contrast-floor(@gray-base);
  .set-contrast(@gray-base; @contrast-floor*.62; @mode: shade;);
  @gray-darker-base: @contrast;
  @gray-darker: mix(lighten(black, 16%), @gray-darker-base, @gray-mix);
}


@grey-lighter: @gray-lighter;
@grey-light: @gray-light;
@grey-medium: @gray-medium;
@grey: @gray;
@grey-dark: @gray-dark;
@grey-darker: @gray-darker;

// semantic colors 

.set-color-bases();

@color-wheel: 
		@red,
		average(@red, @orange),
		@orange,
		average(@orange, @yellow),
		@yellow,
		average(@yellow, @olive),
		@olive,
		average(@olive, @green),
		@green,
		average(@green, @teal),
		@teal,
		average(@teal, @cyan),
		@cyan,
		average(@cyan, @skyblue),
		@skyblue,
		average(@skyblue, @blue),
		@blue,
		average(@blue, @indigo),
		@indigo,
		average(@indigo, @purple),
		@purple,
		average(@purple, @violet),
		@violet,
		average(@violet, @red);

.set-color-bases() {

	@offset: 3;

	// @base-color: @base-color;

	.set-rep-color(@base-color; @color-wheel;);
	
	@number: @rep-color-number;

	.set-bases();

	.set-bases() when (@number >= 18) {
		@info-base: extract(@color-wheel, @number - @offset);
	}

	.set-bases() when (@number > 12) and (@number < 18) {
		@info-base: extract(@color-wheel, @number - @offset);
	}

	.set-bases() when (@number > 6) and (@number <= 12) {
		@info-base: extract(@color-wheel, @number + @offset);
	}

	.set-bases() when (@number <= 6) {
		@info-base: extract(@color-wheel, @number + @offset);
	}

	
}

.set-action();
.set-reaction();
.set-warning();
.set-success();
.set-info();
.set-failure();
.set-default();

.set-action() {
	@action: @base-color;
	
	.bump-action() when (luma(@action) < 12.5%) {
		// bump it up to at least @warning's brightness if it's not there
		.set-lumafix(@base-color; @gray-light; 100%);
		@action: @lumafix;
	}

	.bump-action() when (default()) {
		@action: @base-color;
	}

	.bump-action();
}

.set-action() when (@base-color = white) { @action: white;}
.set-action() when (@base-color = black) { @action: black;}

.set-reaction() {
	// reaction is for responding, usually after an action
	// a good second step or confirmation color 
	// reaction is typically close to being a complement of action 

	@reaction-base: difference(@base-color, white);
	.set-lumafix(@reaction-base; @strength: 90%;);
    @reaction: @lumafix;
}

.set-reaction() when (@base-color = white) { @reaction: black;}
.set-reaction() when (@base-color = black) { @reaction: white;}

.set-warning() {
	// warning is a high urgency version of its pairing, info
	// its orange/yellow is a complement to info's teal/blue
	// remember: warning comes before the failure, failure after

	@warning-orange: orange;
	@warning-yellow: average(yellow, lemonchiffon);

	.set-distance-action() {
		.set-distance(@warning-orange, @base-color);
		@distance-action: @distance;
	}

	.set-distance-reaction() {
		.set-distance(@warning-orange, @reaction-base);
		@distance-reaction: @distance;
	}

	.set-warning-base() when (@distance-action < 70) or (@distance-reaction < 70) {
		@warning-base: @warning-yellow;
	}

	.set-warning-base() when (default()) {
		@warning-base: @warning-orange;
	}

	.set-warning-final() when (default()) {
		.set-lumafix(@warning-base; @strength: 24%;);
		@warning: @lumafix;
	}

	.set-distance-action();
	.set-distance-reaction();
	.set-warning-base();
	.set-warning-final();
}

.set-success() {
	// success indicates that an action worked or a positive response came through
	// its green tells users they're good to go 

	@success-green: green;
	@success-lightgreen: limegreen;

	.set-distance-action() {
		.set-distance(@success-green, @base-color);
		@distance-action: @distance;
	}

	.set-distance-reaction() {
		.set-distance(@success-green, @reaction-base);
		@distance-reaction: @distance;
	}

	.set-success-base() when (@distance-action < 100) or (@distance-reaction < 100) {
		@success-base: @success-lightgreen;
	}

	.set-success-base() when (default()) {
		@success-base: @success-green;
	}

	.set-success-final() when (luma(@base-color) < 30%) {
		.set-lumafix(@success-base, @strength: 85%);
		@success-final: @lumafix;
	}

	.set-success-final() when (default()) {
		.set-lumafix(@success-base, @strength: 67%);
		@success-final: @lumafix;
	}

	.bump-success() when (luma(@success-final) < luma(@warning)) {
		// bump it up to near @warning's brightness if it's not there
		.set-lumafix(@success-final; @warning; 50%);
		@success: @lumafix;
	}

	.bump-success() when (default()) {
		@success: @success-final;
	}

	.set-distance-action();
	.set-distance-reaction();

	.set-success-base();

	.set-success-final();
	.bump-success();
}

.set-failure() {
	// success's opposite and complement, failure's red tells the user something is wrong 
	// good for negative server responses, missing info, or drawing attention to faults

	@failure-red: tomato;
	@failuredarkred: crimson;

	.set-distance-action() {
		.set-distance(@failure-red, @base-color);
		@distance-action: @distance;
	}

	.set-distance-reaction() {
		.set-distance(@failure-red, @reaction-base);
		@distance-reaction: @distance;
	}

	.set-failure-base() when (@distance-action < 100) or (@distance-reaction < 100) {
		@failure-base: @failuredarkred;
	}

	.set-failure-base() when (default()) {
		@failure-base: @failure-red;
	}

	.set-failure-final() when (luma(@base-color) > 50%) {
		.set-lumafix(@failure-base, @success, 60%);
		@failure: @lumafix;
	}

	.set-failure-final() when (default()) {
		.set-lumafix(@failure-base, @success, 75%);
		@failure: @lumafix;
	}

	.set-distance-action();
	.set-distance-reaction();

	.set-failure-base();

	.set-failure-final();
}

.set-info() {
	// info is meant to be used sparingly with @action, @reaction and @alternate 
	// its extra saturation and lightness is good for drawing attention, like
	// a less urgent warning

	.set-lumafix(@alt-info-base; @strength: 50%);
	@alt-info-base: spin(@info-base, 180);
	@alt-info: @lumafix;

	.set-distance-warning() {
		.set-distance(@info-base, @warning-base);
		@distance-warning: @distance;
	}

	.set-distance-success() {
		.set-distance(@info-base, @success-base);
		@distance-success: @distance;
	}

	.set-new-info-base() {
		@new-info-base: @info-base;
	}

	.set-new-info-base() when (@distance-warning < 150) or (@distance-success < 150) {
		@new-info-base: @alt-info;
	}

	.set-info-final() {
		@bright-info-base: saturate(lighten(@new-info-base, 5%), 5%);
		.set-lumafix(@bright-info-base; @strength: 80%;);
		@info-final: @lumafix;
	}

	.bump-info() when (luma(@info-final) < luma(@warning)) {
		// bump it up to at least @warning's brightness if it's not there
		.set-lumafix(@info-final; @warning; 100%);
		@info: @lumafix;
	}

	.bump-info() when (default()) {
		@info: @info-final;
	}

	.set-distance-warning();
	.set-distance-success();
	.set-new-info-base();
	.set-info-final();
	.bump-info();
}

.set-default() {
	// a nondescript color that blends in and works as a default

	.set-average(@reaction, @info, @warning, @success, @failure;);
	.set-lumafix(@rep-color; @strength: 80%;);
	@default: mix(@average, @lumafix, 62%);
}