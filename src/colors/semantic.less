.set-color-bases();

@color-wheel: 
		@red,
		average(@red, @orange),
		@orange,
		average(@orange, @yellow),
		@yellow,
		average(@yellow, @olive),
		@olive,
		average(@olive, @green),
		@green,
		average(@green, @teal),
		@teal,
		average(@teal, @cyan),
		@cyan,
		average(@cyan, @skyblue),
		@skyblue,
		average(@skyblue, @blue),
		@blue,
		average(@blue, @indigo),
		@indigo,
		average(@indigo, @purple),
		@purple,
		average(@purple, @violet),
		@violet,
		average(@violet, @red);

.set-color-bases() {

	@offset: 3;

	// @action-base: @base-color;

	.set-rep-color(@base-color; @color-wheel;);
	
	@number: @rep-color-number;

	.set-bases();

	.set-bases() when (@number >= 18) {
		@action-base: @rep-color;
		@reaction-base: extract(@color-wheel, @number - 12);
		@info-base: extract(@color-wheel, @number - @offset);
	}

	.set-bases() when (@number > 12) and (@number < 18) {
		@action-base: @rep-color;
		@reaction-base: extract(@color-wheel, @number - 12);
		@info-base: extract(@color-wheel, @number - @offset);
	}

	.set-bases() when (@number > 6) and (@number <= 12) {
		@action-base: @rep-color;
		@reaction-base: extract(@color-wheel, @number + 12);
		@info-base: extract(@color-wheel, @number + @offset);
	}

	.set-bases() when (@number <= 6) {
		@action-base: @rep-color;
		@reaction-base: extract(@color-wheel, @number + 12);
		@info-base: extract(@color-wheel, @number + @offset);
	}

	
}

.set-action();
.set-reaction();
.set-warning();
.set-success();
.set-info();
.set-failure();
.set-default();

.set-action() {

	@action: @base-color;
}

.set-action() when (@base-color = white) { @action: white;}
.set-action() when (@base-color = black) { @action: black;}

.set-reaction() {
	// reaction is for responding, usually after an action
	// a good second step or confirmation color 
	// reaction is typically close to being a complement of action 

	.set-lumafix(@reaction-base; @strength: 90%;);
    @reaction: @lumafix;
}

.set-reaction() when (@base-color = white) { @reaction: black;}
.set-reaction() when (@base-color = black) { @reaction: white;}

.set-warning() {
	// warning is a high urgency version of its pairing, info
	// its orange/yellow is a complement to info's teal/blue
	// remember: warning comes before the failure, failure after

	@warning-orange: orange;
	@warning-yellow: average(yellow, lemonchiffon);

	.set-distance-action() {
		.set-distance(@warning-orange, @action-base);
		@distance-action: @distance;
	}

	.set-distance-reaction() {
		.set-distance(@warning-orange, @reaction-base);
		@distance-reaction: @distance;
	}

	.set-warning-base() when (@distance-action < 70) or (@distance-reaction < 70) {
		@warning-base: @warning-yellow;
		@warning-was-yellow: true;
	}

	.set-warning-base() when (default()) {
		@warning-base: @warning-orange;
		@warning-was-yellow: false;
	}

	.set-warning-final() when (@warning-was-yellow = true) {
		.set-lumafix(@warning-base; @strength: 24%;);
		@warning: mix(@warning-base, @lumafix, 24%);
	}

	.set-warning-final() when (default()) {
		.set-lumafix(@warning-base; @strength: 24%;);
		@warning: @lumafix;
	}

	.set-distance-action();
	.set-distance-reaction();
	.set-warning-base();
	.set-warning-final();
}

.set-success() {
	// success indicates that an action worked or a positive response came through
	// its green tells users they're good to go 

	@success-green: green;
	@success-lightgreen: limegreen;

	.set-distance-action() {
		.set-distance(@success-green, @action-base);
		@distance-action: @distance;
	}

	.set-distance-reaction() {
		.set-distance(@success-green, @reaction-base);
		@distance-reaction: @distance;
	}

	.set-success-base() when (@distance-action < 100) or (@distance-reaction < 100) {
		@success-base: @success-lightgreen;
	}

	.set-success-base() when (default()) {
		@success-base: @success-green;
	}

	.set-success-final() when (luma(@base-color) < 30%) {
		.set-lumafix(@success-base, @strength: 85%);
		@success-final: @lumafix;
	}

	.set-success-final() when (default()) {
		.set-lumafix(@success-base, @strength: 67%);
		@success-final: @lumafix;
	}

	.bump-success() when (luma(@success-final) < luma(@warning)) {
		// bump it up to near @warning's brightness if it's not there
		.set-lumafix(@success-final; @warning; 50%);
		@success: @lumafix;
	}

	.bump-success() when (default()) {
		@success: @info-final;
	}

	.set-distance-action();
	.set-distance-reaction();

	.set-success-base();

	.set-success-final();
	.bump-success();
}

.set-failure() {
	// success's opposite and complement, failure's red tells the user something is wrong 
	// good for negative server responses, missing info, or drawing attention to faults

	@failure-red: tomato;
	@failuredarkred: crimson;

	.set-distance-action() {
		.set-distance(@failure-red, @action-base);
		@distance-action: @distance;
	}

	.set-distance-reaction() {
		.set-distance(@failure-red, @reaction-base);
		@distance-reaction: @distance;
	}

	.set-failure-base() when (@distance-action < 100) or (@distance-reaction < 100) {
		@failure-base: @failuredarkred;
	}

	.set-failure-base() when (default()) {
		@failure-base: @failure-red;
	}

	.set-failure-final() when (luma(@base-color) > 50%) {
		.set-lumafix(@failure-base, @success, 60%);
		@failure: @lumafix;
	}

	.set-failure-final() when (default()) {
		.set-lumafix(@failure-base, @success, 75%);
		@failure: @lumafix;
	}

	.set-distance-action();
	.set-distance-reaction();

	.set-failure-base();

	.set-failure-final();
}

.set-info() {
	// info is meant to be used sparingly with @action, @reaction and @alternate 
	// its extra saturation and lightness is good for drawing attention, like
	// a less urgent warning

	.set-lumafix(@alt-info-base; @strength: 50%);
	@alt-info-base: spin(@info-base, 180);
	@alt-info: @lumafix;

	.set-distance-warning() {
		.set-distance(@info-base, @warning-base);
		@distance-warning: @distance;
	}

	.set-distance-success() {
		.set-distance(@info-base, @success-base);
		@distance-success: @distance;
	}

	.set-new-info-base() {
		@new-info-base: @info-base;
		@info-was-alternate: false;
	}

	.set-new-info-base() when (@distance-warning < 150) or (@distance-success < 150) {
		@new-info-base: @alt-info;
		@info-was-alternate: true;
	}

	.set-info-final() {
		@bright-info-base: saturate(lighten(@new-info-base, 5%), 5%);
		.set-lumafix(@bright-info-base; @strength: 80%;);
		@info-final: @lumafix;
	}

	.bump-info() when (luma(@info-final) < luma(@warning)) {
		// bump it up to at least @warning's brightness if it's not there
		.set-lumafix(@info-final; @warning; 100%);
		@info: @lumafix;
	}

	.bump-info() when (default()) {
		@info: @info-final;
	}

	.set-distance-warning();
	.set-distance-success();
	.set-new-info-base();
	.set-info-final();
	.bump-info();
}

.set-default() {
	// default is the color wheel representation of the base color

	.set-lumafix(@rep-color; @strength: 80%;);
	@default: @lumafix;
}