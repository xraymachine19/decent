.hero {
    @hero-background: @default;

    @subtle-patterns: bamboo, charlie-brown, diagonal-lines, endless-clouds, eyes,
    falling-triangles, glamorous, graph-paper, heavy-rain, i-like-food, jigsaw, 
    morphing-diamonds, parkay-floor, pixel-dots, rain, signal, texture, tiny-checkers, 
    volcano-lamp, zig-zag;
  
    font-size: 110%;
    padding: @padding;
    width: 100%;
    max-width: none;
    margin-bottom: @gutter;
  
    .set-pattern() when (@randomness = true) {
        .set-random-pattern(@pattern-list) {
            @random: `Math.random()`;
            @length: length(@pattern-list);
            @the-pattern: floor(@random*@length);
            @random-pattern: extract(@pattern-list, @the-pattern - 1);
        }

        .set-random-pattern(@subtle-patterns);
        @pattern: @random-pattern;
    }

    .set-pattern() when (@randomness = false) {
        @pattern: @hero-pattern;
    }

    .set-pattern();

    .pattern(@pattern; @hero-background; 1.1;);

    // this generates a pattern background for each semantic color
    // each(@semantic-color-names, {
    //     @color: @@value;
    //     @color-name: @value;
    //     &.@{color-name} { .pattern(@pattern; @color; 1.1;);}
    // });

    p {
        text-indent: 0;
    }

    &.island {
        margin: 0;
        margin-bottom: @gutter;

        .on-tablet({
            padding: 12% 16%;
        });
    }

    // this rewrites color- rules to work inside the hero
    // .inline-elements({
    //     each(@semantic-color-names, { 
    //         &.color-@{value} { .color-text(@@value; @hero-background);};
    //     });
    // });

    .button-elements({
        font-size: 125%;
    });

    .on-tablet({
        padding: @gutter;
    });

    .on-desktop({
        padding: @gutter * 2;
    });
}